
===============================================================================
                   Creational Pattern - Factory Method
===============================================================================

            _______ _______ _______________________ _______
           (  ____ (  ___  |  ____ \__   __(  ___  |  ____ )\     /|
           | (    \/ (   ) | (    \/  ) (  | (   ) | (    )( \   / )
           | (__   | (___) | |        | |  | |   | | (____)|\ (_) /
           |  __)  |  ___  | |        | |  | |   | |     __) \   /
           | (     | (   ) | |        | |  | |   | | (\ (     ) (
           | )     | )   ( | (____/\  | |  | (___) | ) \ \__  | |
           |/ _____|/ ____\(_______/__)_(  (_______)/ __\__/  \_/
             (       |  ____ \__   __/\     /(  ___  |  __  \
             | () () | (    \/  ) (  | )   ( | (   ) | (  \  )
             | || || | (__      | |  | (___) | |   | | |   ) |
             | |(_)| |  __)     | |  |  ___  | |   | | |   | |
             | |   | | (        | |  | (   ) | |   | | |   ) |
             | )   ( | (____/\  | |  | )   ( | (___) | (__/  )
             |/     \(_______/  )_(  |/     \(_______|______/


===============================================================================

Definition

    Define an interface for creating an object, but let subclasses decide which
    class to instantiate. Factory Method lets a class defer instantiation to
    subclasses.

Problem

    The primary problem this pattern solves is defining the attributes at an
    abstract class level, but then allowing them to be implemented on a
    subclass level.

    This way client code can simply care about the abstract class and its
    factory method and be carefree regarding how the subclasses are built.


Participant Classes

    Product
        - Defines the interface of objects the factory method creates.
        - Example: Page
    ConcreteProduct
        - Implements the Product interface.
        - Example: SkillsPage, EducationPage, ExperiencePage
    Creator
        - Declares the factory method, which returns an object of type Product.
          Creator may also define a default implementation of the factory
          method that returns a default ConcreteProduct object.
        - May call the factory method to create a Product object.
        - Example: Document
    ConcreteCreator
        - Overrides the factory method to return an instance of a
          ConcreteProduct.
        - Example: Report, Resume

