
===============================================================================
                   Creational Pattern - Abstract Factory
===============================================================================

       _______ ______  _______________________ _______ ________________
      (  ___  |  ___ \(  ____ \__   __(  ____ |  ___  |  ____ \__   __/
      | (   ) | (   ) ) (    \/  ) (  | (    )| (   ) | (    \/  ) (
      | (___) | (__/ /| (_____   | |  | (____)| (___) | |        | |
      |  ___  |  __ ( (_____  )  | |  |     __)  ___  | |        | |
      | (   ) | (  \ \      ) |  | |  | (\ (  | (   ) | |        | |
      | )   ( | )___) )\____) |  | |  | ) \ \_| )   ( | (____/\  | |
      |/ ____\|/ \___/\_______)__)_(__|/___\__// ____\(_______/  )_(
         (  ____ (  ___  |  ____ \__   __(  ___  |  ____ )\     /|
         | (    \/ (   ) | (    \/  ) (  | (   ) | (    )( \   / )
         | (__   | (___) | |        | |  | |   | | (____)|\ (_) /
         |  __)  |  ___  | |        | |  | |   | |     __) \   /
         | (     | (   ) | |        | |  | |   | | (\ (     ) (
         | )     | )   ( | (____/\  | |  | (___) | ) \ \__  | |
         |/      |/     \(_______/  )_(  (_______)/   \__/  \_/


===============================================================================

Definition

    Provide an interface for creating families of related or dependent objects
    without specifying their concrete classes.

    A factory produces the instances to act upon. By abstracting the factory
    methods which produce the instances we eliminate dependency on specific
    implementations that product specific instances.

    A class that defines the used instances is abstracted as well so that there
    is no dependency on how they are produced nor how they operate.

    The pattern basically removes dependency on any implementation class by
    abstracting how the classes are instantiated as well as how they operate.

Problem

    An Abstract Factory pattern allows us to overcome platform dependence
    by hiding all 'new' operators for their products.

    For instance, a stamping machine could stamp multiple car products like the
    hood, doors, and bumpers. Each of these products could have different
    models that make them unique, but still can be stamped by the stamping
    machine in their own way.

    The abstract factory object is responsible for defining the methods which
    create the products. Each product is abstracted and the abstraction defines
    their required operation.

    So the stamping machine is a client that needs three part to stamps: hood,
    doors and bumpers. A hood is an abstract class that has an operation
    stamp(). Multiple models that extend the hood class define how they should
    be stamped. Same for each part.

    An implementation for specific model factories extend the abstract factory
    so an example would be ModelZ1000Factory. This produces the ModelZ1000
    parts. The StampingMachine then simply calls stamp on the parts and they
    are stamped correctly.

    Then the stamping machine client never creates the parts, and never defines
    how they interact.

Participant Classes

    AbstractFactory
        - Declares an interface for operations that create abstract products.
    ConcreteFactory
        - Implements the operations to create concrete product objects.
    AbstractProduct
        - Declares an interface for a type of product object.
    Product
        - Defines a product object to be created by the corresponding concrete
          factory.
    Client
        - Uses interfaces declared by AbstractFactory and AbstractProduct
          classes.

