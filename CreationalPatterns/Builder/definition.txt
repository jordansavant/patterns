===============================================================================

                       Creational Pattern - Builder
===============================================================================

           ______         __________       ______  _______ _______
          (  ___ \|\     /\__   __( \     (  __  \(  ____ (  ____ )
          | (   ) ) )   ( |  ) (  | (     | (  \  ) (    \/ (    )|
          | (__/ /| |   | |  | |  | |     | |   ) | (__   | (____)|
          |  __ ( | |   | |  | |  | |     | |   | |  __)  |     __)
          | (  \ \| |   | |  | |  | |     | |   ) | (     | (\ (
          | )___) ) (___) |__) (__| (____/\ (__/  ) (____/\ ) \ \__
          |/ \___/(_______)_______(_______(______/(_______//   \__/


===============================================================================

Definition

    Separate the construction of a complex object from its representation so
    that the same construction process can create different representations.

    Unlike creational patterns that construct products in one shot, the Builder
    pattern constructs the product step by step under the control of a
    "director".

Problem

    A common example is parsing. An object's properties are defined by parsing
    some schematic which defines the object. An example is if we had a Document
    object that can be comprised of a various amounts of Paragraphs, Tables and
    Images in varying order.

    We can't simply create the Document because its final representation is
    varying depending on what it is made of. So an XML file is parsed by a
    Director intermediate. For instance it iterates the defined nodes and does
    a switch on the type like "paragraph", then asks the Document to create the
    property it on itself.

    So in this way we could have a TextDocument, PdfDocument builders etc. and
    the Director simply cares about a Document and the parsed order of
    attributes can be built on the Document in the order the XML defined but in
    the format the Builder defined.

Participant Classes

    Builder
        - Specifies an absract interface for creating parts of a product
          object.
        - Example: VehicleBuilder
    ConcreteBuilder
        - Constructs and assembles parts of the product by implementing the
          Builder interface.
        - Defines and keeps track of the representation it creates.
        - Provides an interface for retrieving the product.
        - Example: CarBuilder, BikeBuilder, BoatBuilder
    Director
        - Constructs an object using the Builder interface.
        - Example: Shop
    Product
        - Represents the complex object under construction.
        - ConcreteBuilder builds the product's internal representation and
          defines the process by which it is assembled.
        - Includes classes that define the constituent parts, includes
          interfaces for assembling the parts into the final result.

